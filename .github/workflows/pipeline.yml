# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "Pipeline DevSecOps"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
       
    - name: Install dependencies
      run: npm i --force

    - name: Build project
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
      with:
        category: "/language:${{matrix.language}}"
        
  analisis-codigo:
      name: Análisis de Seguridad
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout del código
          uses: actions/checkout@v3
  
        - name: Configurar Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
  
        - name: Instalar dependencias
          run: npm install --legacy-peer-deps
  
        - name: Análisis estático con ESLint
          run: |
            npm install eslint --save-dev
            npx eslint . || true
  
        - name: Inicializar CodeQL
          uses: github/codeql-action/init@v2
          with:
            languages: javascript
  
        - name: Ejecutar análisis CodeQL
          uses: github/codeql-action/analyze@v2
  
  owasp-dependency-check:
      name: OWASP Dependency-Check
      runs-on: ubuntu-latest
      steps:
        - name: Checkout del código
          uses: actions/checkout@v3
  
        - name: Configurar Java
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'
  
        - name: Descargar y ejecutar OWASP Dependency-Check
          run: |
            wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
            unzip dependency-check-8.4.0-release.zip -d dependency-check
            ./dependency-check/dependency-check/bin/dependency-check.sh \
              --project "Prueba-Ciber3" --scan . --format HTML --out ./odc-report
  
        - name: Subir reporte de vulnerabilidades
          uses: actions/upload-artifact@v3
          with:
            name: owasp-report
            path: ./odc-report
  
  docker-build:
      name: Docker Build & Test
      runs-on: ubuntu-latest
      needs: [analisis-codigo, owasp-dependency-check]
  
      steps:
        - name: Checkout del código
          uses: actions/checkout@v3
  
        - name: Construir imagen Docker
          run: docker build -t miapp-ciber3 .
  
        - name: Probar contenedor Docker
          run: |
            docker run -d -p 3000:3000 --name test-container miapp-ciber3
            sleep 10
            curl -f http://localhost:3000 || (echo "La app no respondió correctamente" && exit 1)
            docker stop test-container
            docker rm test-container
  
        - name: Guardar imagen como artefacto (opcional)
          run: docker save miapp-ciber3 > miapp-ciber3.tar
  
        - name: Subir imagen Docker
          uses: actions/upload-artifact@v3
          with:
            name: docker-image
            path: miapp-ciber3.tar
